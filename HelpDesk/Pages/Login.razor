@page "/"
@using HelpDesk.Authentication
@using HelpDesk.Models
@using Microsoft.EntityFrameworkCore
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@using System;
@using System.Net;
@using System.Net.Mail;

<style>
    body {
        background-image: url('/images/mechel.png');
        background-size: 70%;
        background-position: center bottom; /* Выравнивание изображения вверху справа */
        background-repeat: no-repeat;
    }
</style>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h1>Авторизация</h1>
        </div>
        <div class="mb-3">
            <label class="header2">Логин</label>
            <input @bind="model.UserName" class="form-control" placeholder="Введие логин..." />
        </div>
        <div class="mb-3">
            <label class="header2">Пароль</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Введите пароль..." />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary"><div class="header">Войти</div></button>
        </div>
    </div>
</div>

@code {
    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUserName(model.UserName);
        if (userAccount == null || userAccount.Password != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Неверное имя или пароль!");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role,
            });
        if (userAccount.Role == "User")
        {
            navManager.NavigateTo("/addreq", true);
        }
        else if (userAccount.Role == "Administrator")
        {
            navManager.NavigateTo("/panel", true);
        }
        else if(userAccount.Role == "Supplier")
        {
            navManager.NavigateTo("/reqinj", true);
        }

    }
}
